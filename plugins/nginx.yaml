version: 0.0.2
title: Nginx
description: Log parser for Nginx
parameters:
  kubernetes:
    label: Kubernetes
    description: Enable if running on Kubernetes
    type: bool
    default: false
  kubernetes_service_name:
    label: Kubernetes Service Name
    description: The service name of the Nginx service on Kubernetes
    type: string
    required: true
    relevant_if:
      - kubernetes: true
  enable_access_log:
    label: Access Logs
    description: Enable to collect Nginx access slogs
    type: bool
    default: true
  access_log_path:
    label: Access Log Path
    description: Path to access log file
    type: string
    default: "/var/log/nginx/access.log*"
    relevant_if:
      - kubernetes: false
  enable_error_log:
    label: Error Logs
    description: Enable to collect Nginx error logs
    type: bool
    default: true
  error_log_path:
    label: Error Log Path
    description: Path to error log file
    type: string
    default: "/var/log/nginx/error.log*"
    relevant_if:
      - kubernetes: false
  start_at:
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{$enable_access_log := default true .enable_access_log}}
# {{$access_log_path := default "/var/log/nginx/access.log*" .access_log_path}}
# {{$enable_error_log := default true .enable_error_log}}
# {{$error_log_path := default "/var/log/nginx/error.log*" .error_log_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  # {{ if .kubernetes }}
  - id: kubernetes_input
    container_log_path: "/var/log/containers/{{ .service_name }}*"
    start_at: '{{ $start_at }}'

  - id: k8s_router
    type: router
    routes:
      - expr: "$record.stream == 'stderr'"
        output: "{{ if $enable_error_log }} error_regex_parser {{ else }} null_output {{ end }}"
      - expr: "$record.stream == 'stdout'"
        output: "{{ if $enable_access_log }} access_regex_parser {{ else }} null_output {{ end }}"

  - id: null_output
    type: drop_output
  # {{ end }} .kubernetes

  # {{ if not .kubernetes }}

  # {{ if $enable_access_log }}
  - id: nginx_access_reader
    type: file_input
    include:
      - '{{ $access_log_path }}'
    start_at: '{{ $start_at }}'
    labels:
      log_type: 'nginx.access'
      plugin_id: '{{ .id }}'
    output: access_regex_parser
  # {{ end }} $enable_access_log 

  # {{ if $enable_error_log }}
  - id: nginx_error_reader
    type: file_input
    include:
      - '{{ $error_log_path }}'
    start_at: '{{ $start_at }}'
    multiline:
      line_start_pattern: '\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2} \[\w+\] (?P<pid>\d+).(?P<tid>\d+): '
    labels:
      log_type: 'nginx.error'
      plugin_id: '{{ .id }}'
    output: error_regex_parser
  # {{ end }} $enable_error_log

  # {{ end }} not .kubernetes

  - id: access_regex_parser
    type: regex_parser
    regex: '^(?P<remote>[^ ]*) (?P<host>[^ ]*) (?P<user>[^ ]*) \[(?P<time>[^\]]*)\] "(?P<method>\S+)(?: +(?P<path>[^\"]*?)(?: +\S*)?)?" (?P<code>[^ ]*) (?P<size>[^ ]*)(?: "(?P<referrer>[^\"]*)" "(?P<agent>[^\"]*)"(?:\s+(?P<http_x_forwarded_for>[^ ]+))?)?$'
    timestamp:
      parse_from: time
      layout: '%d/%b/%Y:%H:%M:%S %z'
    output: {{ .output }}

  - id: error_regex_parser
    type: regex_parser
    regex: '^(?P<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<log_level>\w+)\] (?P<pid>\d+).(?P<tid>\d+): (?P<message>.*)'
    timestamp:
      parse_from: time
      layout: '%Y/%m/%d %T'
    severity:
      parse_from: log_level
      mapping:
        critical: crit
        emergency: emerg
    output: {{ .output }}
